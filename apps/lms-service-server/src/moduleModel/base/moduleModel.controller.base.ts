/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ModuleModelService } from "../moduleModel.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ModuleModelCreateInput } from "./ModuleModelCreateInput";
import { ModuleModel } from "./ModuleModel";
import { ModuleModelFindManyArgs } from "./ModuleModelFindManyArgs";
import { ModuleModelWhereUniqueInput } from "./ModuleModelWhereUniqueInput";
import { ModuleModelUpdateInput } from "./ModuleModelUpdateInput";
import { AssignmentFindManyArgs } from "../../assignment/base/AssignmentFindManyArgs";
import { Assignment } from "../../assignment/base/Assignment";
import { AssignmentWhereUniqueInput } from "../../assignment/base/AssignmentWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ModuleModelControllerBase {
  constructor(
    protected readonly service: ModuleModelService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ModuleModel })
  @nestAccessControl.UseRoles({
    resource: "ModuleModel",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createModuleModel(
    @common.Body() data: ModuleModelCreateInput
  ): Promise<ModuleModel> {
    return await this.service.createModuleModel({
      data: {
        ...data,

        course: data.course
          ? {
              connect: data.course,
            }
          : undefined,
      },
      select: {
        content: true,

        course: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [ModuleModel] })
  @ApiNestedQuery(ModuleModelFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ModuleModel",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async moduleModels(@common.Req() request: Request): Promise<ModuleModel[]> {
    const args = plainToClass(ModuleModelFindManyArgs, request.query);
    return this.service.moduleModels({
      ...args,
      select: {
        content: true,

        course: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ModuleModel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ModuleModel",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async moduleModel(
    @common.Param() params: ModuleModelWhereUniqueInput
  ): Promise<ModuleModel | null> {
    const result = await this.service.moduleModel({
      where: params,
      select: {
        content: true,

        course: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ModuleModel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ModuleModel",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateModuleModel(
    @common.Param() params: ModuleModelWhereUniqueInput,
    @common.Body() data: ModuleModelUpdateInput
  ): Promise<ModuleModel | null> {
    try {
      return await this.service.updateModuleModel({
        where: params,
        data: {
          ...data,

          course: data.course
            ? {
                connect: data.course,
              }
            : undefined,
        },
        select: {
          content: true,

          course: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ModuleModel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ModuleModel",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteModuleModel(
    @common.Param() params: ModuleModelWhereUniqueInput
  ): Promise<ModuleModel | null> {
    try {
      return await this.service.deleteModuleModel({
        where: params,
        select: {
          content: true,

          course: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/assignments")
  @ApiNestedQuery(AssignmentFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Assignment",
    action: "read",
    possession: "any",
  })
  async findAssignments(
    @common.Req() request: Request,
    @common.Param() params: ModuleModelWhereUniqueInput
  ): Promise<Assignment[]> {
    const query = plainToClass(AssignmentFindManyArgs, request.query);
    const results = await this.service.findAssignments(params.id, {
      ...query,
      select: {
        assignedBy: true,
        createdAt: true,
        description: true,
        dueDate: true,
        id: true,

        moduleField: {
          select: {
            id: true,
          },
        },

        title: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/assignments")
  @nestAccessControl.UseRoles({
    resource: "ModuleModel",
    action: "update",
    possession: "any",
  })
  async connectAssignments(
    @common.Param() params: ModuleModelWhereUniqueInput,
    @common.Body() body: AssignmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      assignments: {
        connect: body,
      },
    };
    await this.service.updateModuleModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/assignments")
  @nestAccessControl.UseRoles({
    resource: "ModuleModel",
    action: "update",
    possession: "any",
  })
  async updateAssignments(
    @common.Param() params: ModuleModelWhereUniqueInput,
    @common.Body() body: AssignmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      assignments: {
        set: body,
      },
    };
    await this.service.updateModuleModel({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/assignments")
  @nestAccessControl.UseRoles({
    resource: "ModuleModel",
    action: "update",
    possession: "any",
  })
  async disconnectAssignments(
    @common.Param() params: ModuleModelWhereUniqueInput,
    @common.Body() body: AssignmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      assignments: {
        disconnect: body,
      },
    };
    await this.service.updateModuleModel({
      where: params,
      data,
      select: { id: true },
    });
  }
}
