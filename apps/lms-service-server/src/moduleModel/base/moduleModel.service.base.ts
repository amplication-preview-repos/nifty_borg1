/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ModuleModel as PrismaModuleModel,
  Assignment as PrismaAssignment,
  Course as PrismaCourse,
} from "@prisma/client";

export class ModuleModelServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ModuleModelCountArgs, "select">
  ): Promise<number> {
    return this.prisma.moduleModel.count(args);
  }

  async moduleModels<T extends Prisma.ModuleModelFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ModuleModelFindManyArgs>
  ): Promise<PrismaModuleModel[]> {
    return this.prisma.moduleModel.findMany<Prisma.ModuleModelFindManyArgs>(
      args
    );
  }
  async moduleModel<T extends Prisma.ModuleModelFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ModuleModelFindUniqueArgs>
  ): Promise<PrismaModuleModel | null> {
    return this.prisma.moduleModel.findUnique(args);
  }
  async createModuleModel<T extends Prisma.ModuleModelCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ModuleModelCreateArgs>
  ): Promise<PrismaModuleModel> {
    return this.prisma.moduleModel.create<T>(args);
  }
  async updateModuleModel<T extends Prisma.ModuleModelUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ModuleModelUpdateArgs>
  ): Promise<PrismaModuleModel> {
    return this.prisma.moduleModel.update<T>(args);
  }
  async deleteModuleModel<T extends Prisma.ModuleModelDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ModuleModelDeleteArgs>
  ): Promise<PrismaModuleModel> {
    return this.prisma.moduleModel.delete(args);
  }

  async findAssignments(
    parentId: string,
    args: Prisma.AssignmentFindManyArgs
  ): Promise<PrismaAssignment[]> {
    return this.prisma.moduleModel
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .assignments(args);
  }

  async getCourse(parentId: string): Promise<PrismaCourse | null> {
    return this.prisma.moduleModel
      .findUnique({
        where: { id: parentId },
      })
      .course();
  }
}
